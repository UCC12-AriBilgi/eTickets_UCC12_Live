06.05.2024
Step01
	+1. Projenin yaratılması 
		
	+2.	Adım adım ilerleme şeklinde yapılacağı için tüm solution Step01,Step02,Step03,.... yapısında ayrı ayrı ama birbirini takip edecek şekilde olabilmesi için projenin namespace ve assembly kısımlarının aynı olabilmesi için gerekli değişiklikleri Project/Properties kısmından ayarlandı(eTickets)

	+3.Arka planda bir veritabanı olacağı ve CodeFirst yapısı kullanılacağı için gerekli NuGet paketlerinin yüklenmesi.
		. Microsoft.EntityFrameworkCore
		. Microsoft.EntityFrameworkCore.SqlServer
		. Microsoft.EntityFrameworkCore.Design
		. Microsoft.EntityFrameworkCore.Tools

	+4. VT mizde olacak olan tabloların yani modellerimizin(class) oluşturulması. (\Models altına)
		. Actor
		. Producer
		. Cinema
		. Movie
			Bu class da movienin hangi category de olduğunu belirtecek bir alanımız var.Bunu ayrı bir class altında "enum" şeklinde tutalım. Bunun için ayrı bir Data isimli klasör yaratalım.

	+5. DbContext yapısının eklenmesi (Db ile Modellerim arasındaki translator/tercüman) (\Data\AppDbContext.cs) İçeriği ilerleyen bölümlerde tamamlayacağız.

	+6. Programın ana giriş noktası olan Program.cs classına gidip bu tanımı oraya da ekleyelim. VT için gerekli olacak ConnectionString tanımını da ilerleyen bölümlerde güncelleyeceğiz.

	7. Model ilişkilendirmeleri
		. Cinema <-->> Movie (Bir cinemada bir kaç tane movie oynayabilir)
		. Producer <-->> Movie (Bir yapımcı/yönetmen birkaç Movie yaratmış/yönetmiş olabilir)
		. Birçok Actor birçok Movie de oynayabilir(çoğa çok ilişki). Bundan dolayı Actor-Movie classları/modelleri arasındaki ilişkiyi kurabilmek için ara bir modelden(Actors_Movies) yararlanmak (junction) daha uygun bir çözümdür. Dolayısı ile bununla ilişkili ara modelimi oluşturmalıyım.



