06.05.2024 (1.Gün) - Step01

	+1. Projenin yaratılması 
		
	+2.	Adım adım ilerleme şeklinde yapılacağı için tüm solution Step01,Step02,Step03,.... yapısında ayrı ayrı ama birbirini takip edecek şekilde olabilmesi için projenin namespace ve assembly kısımlarının aynı olabilmesi için gerekli değişiklikleri Project/Properties kısmından ayarlandı(eTickets)

	+3.Arka planda bir veritabanı olacağı ve CodeFirst yapısı kullanılacağı için gerekli NuGet paketlerinin yüklenmesi.
		. Microsoft.EntityFrameworkCore
		. Microsoft.EntityFrameworkCore.SqlServer
		. Microsoft.EntityFrameworkCore.Design
		. Microsoft.EntityFrameworkCore.Tools

	+4. VT mizde olacak olan tabloların yani modellerimizin(class) oluşturulması. (\Models altına)
		. Actor
		. Producer
		. Cinema
		. Movie
			Bu class da movienin hangi category de olduğunu belirtecek bir alanımız var.Bunu ayrı bir class altında "enum" şeklinde tutalım. Bunun için ayrı bir Data isimli klasör yaratalım.

	+5. DbContext yapısının eklenmesi (Db ile Modellerim arasındaki translator/tercüman) (\Data\AppDbContext.cs) İçeriği ilerleyen bölümlerde tamamlayacağız.

	+6. Programın ana giriş noktası olan Program.cs classına gidip bu tanımı oraya da ekleyelim. VT için gerekli olacak ConnectionString tanımını da ilerleyen bölümlerde güncelleyeceğiz.

	+7. Model ilişkilendirmeleri
		. Cinema <-->> Movie (Bir cinemada bir kaç tane movie oynayabilir)
		
		. Producer <-->> Movie (Bir yapımcı/yönetmen birkaç Movie yaratmış/yönetmiş olabilir)
		
		. Birçok Actor birçok Movie de oynayabilir(çoğa çok ilişki). Bundan dolayı Actor-Movie classları/modelleri arasındaki ilişkiyi kurabilmek için ara bir modelden(Actors_Movies) yararlanmak (junction) daha uygun bir çözümdür. Dolayısı ile bununla ilişkili ara modelimi oluşturmalıyım.
			Movies <-->> Actors_Movies (Bir Movie de birçok Actor olabilir)
			Actors <-->> Actors_Movies (Bir Actor birçok Movie de oynayabilir)

		7.1 Modellerde relation eklemeleri
			. Producer.cs --> Relations
			. Cinema.cs --> Relations
			. Actor_Movie ara classı yaratıldı
			. Actor.cs --> Relations
			. Movie.cs --> Relations

	+8. AppDbContext classındaki ayarlamalar. Yaratılırken modellerin birbirine bağlanması, model yapılarının vt tarafındaki tablo karşılıklarının tanımlanması gibi işlemler.
-------------------------------------------------------------------------
07.05.2024 (2.gün) - Step01

	+9. appsettings.json (uygulamaya ait çeşitli konfigürasyon ayarlarının bulunduğu dosya) VT için gerekli ConnectionString bilgisinin ayarlanması (Server=BABEGT\\SQLEXPRESS;Initial Catalog=eTickets_UCC12;Integrated Security=True;TrustServerCertificate=True;)

	+10. Program.cs altında daha önceden belirtimini yapmış olduğumuz AddDbContext kısmına bu konfigürasyon değerlerini okuyacak ve öğrenecek şekilde gerekli düzenlemelerin yapılması

	+11. SQL tarafında VT yi oluşturabilmek için Migration yapısını kullanalım. Migration işlemi karşı tarafta ne tür bir yapı olacağını oluşturur.
		PM> add-migration Initial
		
	+12. İşlem başarılıysa oluşacak Migration isimli dizin altında ilgili VT yapısının kod karşılığını görmüş olacağız. Not: Daha henüz VT yaratılmadı.

	+13. VT nin yaratılması için PM dan aşağıdaki komut girilir
		PM> update-database -verbose

		(Not : ALTER AUTHORIZATION ON DATABASE::eTickets_UCC12 TO sa) (SQL tarafında Diagram yaratma sorunuyla karşılaşılırsa)

	+14. Şu an VT yapı olarak oluştu fakat içinde herhangi bir veri yok. Onun için fake/dummy data oluşturacak şekilde düzenlemeler yapalım.
		. \Data\AppDbInitializer.cs isimli class ı yaratalım

	+15. Program.cs altına bu veri yaratma kısmını ekleyelim
------------------------------------------------------------------------
08.05.2024 (3.Gün) - Step02


	Not : 
		. Solution içersine Step02 isimli yeni bir proje yaratalım.
		. Step01 projesi içinde yapılanları Step02 projesi içersine kopyeleyelim (Controllers,Data,Migrations,Models,ProjectItems,Views,appsettings.json,Notes,Program.cs)
		. Projenin tümünün uyumlu olabilmesi açısından gerekli Namespaces ve Assembly tanımlarını düzenleme (eTickets) (Project/Properties)
		. EF kullanmak için gerekli NuGet paketleri ni bu proje de uygulamak gerekiyor.(Kopyeleme esnasında bunlar gelmiyor)

	+16. Modellerimize bağlı olarak öncelikle Controller ların oluşturulması
		- ActorsController
		- ProducersController
		- CinemasController
		- MoviesController

	17. Controller lara bağlı olarak Index Viewlarının oluşturulması.
		Not: Amaç VT tarafında ilgili tablolarda bulunan verileri listeleme yapacağımız için öncelikle bu controller lar içine ilgili View a gittiğinde verileri gösterebilmesi için gerekli VT okumalarını yapalım ki View lar bunları gösterebilsin.

		Bundan sonrada _Layout.cshtml de linklerin verilmesi














